{"pages":[],"posts":[{"title":"Liunx基本命令总结（一）——文件目录类","text":"最近学习了Linux的一些基本命令，写个博客记录一下，以便之后复习。 1.pwd指令功能描述 ： 显示当前工作目录的绝对路径。基本语法： pwd 2.ls指令功能描述 ： 显示当前目录的内容信息。基本语法： ls [选项] [目录或是文件]常用选项： -a： 显示当前目录所有文件和目录，包括隐藏文件； -l：以列表的形式显示信息； 3.cd指令功能描述 ： 切换工作目录(change directory)；基本语法： cd [参数]常用参数： 一个路径（相对路径和绝对路径都行）；其他参数或用法 cd ..：切换到当前目录的上一级目录； cd ~：回到当前用户的家目录； 4.mkdir指令功能描述 ： 用于创建目录（make directory）；基本语法： mkdir [选项] 要创建的目录常用选项： -p：创建多及目录； 5.rmdir指令功能描述 ： 删除空目录；基本语法： rmdir [选项] 要删除的目录使用细节： rm直接使用删除的是空目录，非空目录无法删除； ps：可以 rm -rf 要删除的目录 删除非空目录； 6.touch指令功能描述 ： 创建空文件；基本语法： touch 文件名称 7.cp指令功能描述 ： 拷贝文件到指定目录；基本语法： cp [选项] 源文件 目标文件常用参数： -r：递归复制整个文件夹；使用细节： 目标目录中有同名文件时默认覆盖的使用方法： \\cp [选项] 源文件 目标文件 ８.rm指令功能描述 ： 删除文件或目录；基本语法： rm [选项] 要删除的文件或目录常用选项： -r：递归删除整个文件夹； -f：强制删除不提示； 9.mv指令功能描述 ： 移动文件与目录或重命名；基本语法： mv oldFileName newFileN mv 要移动的文件 目标位置的路径 10.cat指令功能描述 ： 以只读的方式查看文件内容；基本语法： cat [选项] 要查看的文件；常用选项： -n：显示行号； 11.more指令功能描述 ： more指令是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容；基本语法： more 要查看的文件快捷键： 12.less指令功能描述 ： less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。基本语法： less 要查看的文件快捷键： 13.&gt;指令和&gt;&gt;指令功能描述 ： &gt;：输出重定向，将命令输出的内容写入文件，会覆盖文件原有的内容； &gt;&gt;：追加：将命令输出的内容追加到文件末尾，不会覆盖文件原有内容；用法举例： （1）ls &gt; a.txt ：将ls命令输出的内容写入到文件a.txt； （2）cat a.txt &gt;&gt; b.txt：将cat输出的内容(即文件a.txt的内容)追加到b.txt中。 14.echo指令功能描述 ： 输出内容到控制台；基本语法： echo [选项] 要输出的内容用法举例： echo $PATH ：输出环境变量； 15.head指令功能描述 ： 显示文件的开头部分内容，默认显示前十行；基本语法： head 要查看的文件 head -n5 （查看文件的前5行，5可以使任意数） 16.tail指令功能描述 ： 显示文件的尾部的内容，默认显示最后十行；基本语法： head 要查看的文件 head -n5 要查看的文件（查看文件的候5行，5可以使任意数） head -f 要查看的文件 （实时追踪该文档的所有更新） 17.ln指令功能描述 ： 创建软链接，软链接也叫符号链接，类似于windows里的快捷方式，主要存放了链接其他文件的路径；基本语法： ln -s [原文件或目录] [软链接名]； 18.history指令功能描述 ： 查看已经执行过的历史命令；基本语法： history （查看所有执行过的历史命令） history 10 （查看执行过的最后十条命令，10可以使任意数） !178 （执行 编号为178的历史命令，178可以是任意数）","link":"/2019/11/05/Liunx-command1/"},{"title":"归并排序","text":"基本思想归并排序是利用分治思想的一种排序算法，该算法将一列数平均分为两份，然后将各自排好序和，再按照大小顺序合并成有序的列数，对于分开后小规模的的数列采用同样的思想，知道分成单个的数，这个时候每个数独自都是有序的，然后一层层合并，最终即可的得到有序的一列数； 图解 图片来自网络， 侵删 代码实现1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include \"cstdio\"#include \"iostream\"using namespace std;//合并两个排好序的数组void mergearray(int a[], int first, int mid, int last, int temp[]){ int i = first, j = mid + 1, k = 0; //用temp数组做中间变量进行数组的合并 while (i &lt;= mid &amp;&amp; j &lt;= last) { if (a[i] &lt;= a[j]) temp[k++] = a[i++]; else temp[k++] = a[j++]; } while (i &lt;= mid) temp[k++] = a[i++]; while (j &lt;= last) temp[k++] = a[j++]; for(i = 0; i &lt; k; i++) a[first + i] = temp[i];}//归并排序void mergesort(int a[], int first, int last, int temp[]){ int mid = (first + last) / 2; //二分法递归，直到只有一个数不能再分，即 first = last if(first &lt; last) { mergesort(a, first, mid, temp); //先对左半个数组排序 mergesort(a, mid + 1, last, temp); //在对右半个数组排序 mergearray(a, first, mid, last, temp); //将两个排好序的数组合并 }}int main(){ int a[100], temp[100], n; cin &gt;&gt; n; for(int i=1; i &lt;= n; i++) cin &gt;&gt; a[i]; mergesort(a, 1, n, temp); for(int i = 1; i &lt;= n; i++) cout &lt;&lt; a[i] &lt;&lt; \" \";}","link":"/2019/11/07/Mergesorttt/"}],"tags":[{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"},{"name":"排序","slug":"排序","link":"/tags/%E6%8E%92%E5%BA%8F/"},{"name":"归并排序","slug":"归并排序","link":"/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"}],"categories":[{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"算法","slug":"算法","link":"/categories/%E7%AE%97%E6%B3%95/"}]}