{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/11/16/hello-world/"},{"title":"归并排序","text":"基本思想归并排序是利用分治思想的一种排序算法，该算法将一列数平均分为两份，然后将各自排好序和，再按照大小顺序合并成有序的列数，对于分开后小规模的的数列采用同样的思想，知道分成单个的数，这个时候每个数独自都是有序的，然后一层层合并，最终即可的得到有序的一列数； 图解 图片来自网络， 侵删 代码实现1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include \"cstdio\"#include \"iostream\"using namespace std;//合并两个排好序的数组void mergearray(int a[], int first, int mid, int last, int temp[]){ int i = first, j = mid + 1, k = 0; //用temp数组做中间变量进行数组的合并 while (i &lt;= mid &amp;&amp; j &lt;= last) { if (a[i] &lt;= a[j]) temp[k++] = a[i++]; else temp[k++] = a[j++]; } while (i &lt;= mid) temp[k++] = a[i++]; while (j &lt;= last) temp[k++] = a[j++]; for(i = 0; i &lt; k; i++) a[first + i] = temp[i];}//归并排序void mergesort(int a[], int first, int last, int temp[]){ int mid = (first + last) / 2; //二分法递归，直到只有一个数不能再分，即 first = last if(first &lt; last) { mergesort(a, first, mid, temp); //先对左半个数组排序 mergesort(a, mid + 1, last, temp); //在对右半个数组排序 mergearray(a, first, mid, last, temp); //将两个排好序的数组合并 }}int main(){ int a[100], temp[100], n; cin &gt;&gt; n; for(int i=1; i &lt;= n; i++) cin &gt;&gt; a[i]; mergesort(a, 1, n, temp); for(int i = 1; i &lt;= n; i++) cout &lt;&lt; a[i] &lt;&lt; \" \";}","link":"/2019/11/07/Mergesorttt/"}],"tags":[{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"},{"name":"排序","slug":"排序","link":"/tags/%E6%8E%92%E5%BA%8F/"},{"name":"归并排序","slug":"归并排序","link":"/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"}],"categories":[{"name":"算法","slug":"算法","link":"/categories/%E7%AE%97%E6%B3%95/"}]}